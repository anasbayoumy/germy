### Germy User Service - Complete HTTP Tests
### This file contains comprehensive tests for all User Service endpoints

### Variables
@baseUrl = http://localhost:3003
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJmYmYzZDUyYy0xNmI5LTQxMjYtYTQwNy05NGZlNjA0MWYwODkiLCJjb21wYW55SWQiOiIxZWJhMjEzNi1jMTY4LTQ1ZGMtYjA4OS0wMGRjZTdhOTc4MzQiLCJyb2xlIjoiY29tcGFueV9zdXBlcl9hZG1pbiIsImlhdCI6MTc2MTA1NjIzMiwiZXhwIjoxNzYxMTQyNjMyLCJhdWQiOiJnZXJteS1wbGF0Zm9ybSIsImlzcyI6Imdlcm15LWF1dGgtc2VydmljZSJ9.p4UPST-CwFDkwPYAzFksiTsAfp9GoHJAe-iIwdBYHjY
@userId = fe4621c4-cdc4-4e8d-8550-d430e01aeb6e
@companyId = 1eba2136-c168-45dc-b089-00dce7a97834

### ========================================
### üîê AUTHENTICATION SETUP
### ========================================

### Get Auth Token (Login)
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@platform.com",
  "password": "AdminPass123!"
}

### ========================================
### üë• USER MANAGEMENT
### ========================================

### Get All Users (Basic)
GET {{baseUrl}}/api/users?page=1&limit=20
Authorization: Bearer {{authToken}}

### Get All Users with Role Filter
GET {{baseUrl}}/api/users?role=user&page=1&limit=10
Authorization: Bearer {{authToken}}

### Get All Users with Search
GET {{baseUrl}}/api/users?search=john&page=1&limit=10
Authorization: Bearer {{authToken}}

### Get All Users with Active Filter
GET {{baseUrl}}/api/users?isActive=true&page=1&limit=10
Authorization: Bearer {{authToken}}

### Search Users by Name
GET {{baseUrl}}/api/users/search?q=john&limit=10
Authorization: Bearer {{authToken}}

### Search Users by Email
GET {{baseUrl}}/api/users/search?q=admin@testcorp.com&limit=10
Authorization: Bearer {{authToken}}

### Get User by ID
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

### Update User (PUT) - Full Update
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "John Updated",
  "lastName": "Doe Updated",
  "phone": "+1234567890",
  "position": "Senior Developer",
  "department": "Engineering",
  "hireDate": "2024-01-15T00:00:00.000Z",
  "salary": 75000,
  "profilePhotoUrl": "https://example.com/photo.jpg",
  "isActive": true
}

### Update User (PATCH) - Partial Update
PATCH {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "John Patched",
  "position": "Lead Developer"
}

### Deactivate User
PATCH {{baseUrl}}/api/users/{{userId}}/deactivate
Authorization: Bearer {{authToken}}

### ========================================
### ‚öôÔ∏è USER PREFERENCES
### ========================================

### Get User Preferences
GET {{baseUrl}}/api/users/{{userId}}/preferences
Authorization: Bearer {{authToken}}

### Update User Preferences
PUT {{baseUrl}}/api/users/{{userId}}/preferences
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "theme": "dark",
  "language": "en",
  "timezone": "America/New_York",
  "dateFormat": "MM/DD/YYYY",
  "timeFormat": "12h",
  "notifications": {
    "email": true,
    "push": false,
    "sms": true
  },
  "privacy": {
    "profileVisible": true,
    "activityVisible": false
  }
}

### ========================================
### üìä USER ACTIVITIES
### ========================================

### Get User Activities
GET {{baseUrl}}/api/users/{{userId}}/activities?page=1&limit=20
Authorization: Bearer {{authToken}}

### ========================================
### üîß USER SETTINGS
### ========================================

### Get User Settings
GET {{baseUrl}}/api/users/{{userId}}/settings
Authorization: Bearer {{authToken}}

### Update User Settings
PUT {{baseUrl}}/api/users/{{userId}}/settings
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "workHoursStart": "09:00",
  "workHoursEnd": "17:00",
  "workDays": [1, 2, 3, 4, 5],
  "breakDuration": 60,
  "overtimeEnabled": true,
  "remoteWorkEnabled": true,
  "attendanceReminders": {
    "clockIn": true,
    "clockOut": true,
    "breakStart": false
  }
}

### ========================================
### üìà USER ANALYTICS
### ========================================

### Get User Statistics
GET {{baseUrl}}/api/users/{{userId}}/statistics
Authorization: Bearer {{authToken}}

### Get User Activity Summary (30 days)
GET {{baseUrl}}/api/users/{{userId}}/activity-summary?days=30
Authorization: Bearer {{authToken}}

### Get User Activity Summary (7 days)
GET {{baseUrl}}/api/users/{{userId}}/activity-summary?days=7
Authorization: Bearer {{authToken}}

### Get Company User Analytics
GET {{baseUrl}}/api/users/analytics/company/{{companyId}}
Authorization: Bearer {{authToken}}

### ========================================
### üì¶ BULK OPERATIONS
### ========================================

### Bulk Update Users
PUT {{baseUrl}}/api/users/bulk/update
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userIds": ["{{userId}}"],
  "updateData": {
    "department": "Updated Department",
    "position": "Updated Position",
    "isActive": true
  }
}

### Export Users
GET {{baseUrl}}/api/users/export/company/{{companyId}}
Authorization: Bearer {{authToken}}

### Import Users
POST {{baseUrl}}/api/users/import
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "usersData": [
    {
      "email": "newuser1@testcorp.com",
      "firstName": "New",
      "lastName": "User1",
      "phone": "+1234567890",
      "position": "Developer",
      "department": "Engineering",
      "hireDate": "2024-01-15T00:00:00.000Z",
      "salary": 60000,
      "role": "user",
      "isActive": true
    },
    {
      "email": "newuser2@testcorp.com",
      "firstName": "New",
      "lastName": "User2",
      "phone": "+1234567891",
      "position": "Designer",
      "department": "Design",
      "hireDate": "2024-01-20T00:00:00.000Z",
      "salary": 55000,
      "role": "user",
      "isActive": true
    }
  ]
}

### ========================================
### üîç ERROR TESTING
### ========================================

### Get User with Invalid ID
GET {{baseUrl}}/api/users/invalid-uuid
Authorization: Bearer {{authToken}}

### Update User with Invalid Data
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "",
  "phone": "invalid-phone",
  "salary": -1000
}

### Access User Without Permission (Invalid Token)
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer invalid-token

### Access User Without Token
GET {{baseUrl}}/api/users/{{userId}}

### Update User with Missing Required Fields
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "",
  "lastName": ""
}

### Bulk Update with Invalid User IDs
PUT {{baseUrl}}/api/users/bulk/update
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userIds": ["invalid-uuid"],
  "updateData": {
    "department": "Updated Department"
  }
}

### Import Users with Invalid Data
POST {{baseUrl}}/api/users/import
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "usersData": [
    {
      "email": "invalid-email",
      "firstName": "",
      "lastName": "",
      "role": "invalid-role"
    }
  ]
}

### ========================================
### üè• HEALTH CHECK
### ========================================

### Health Check
GET {{baseUrl}}/health

### ========================================
### üìä PERFORMANCE TESTING
### ========================================

### Get Users with Large Limit
GET {{baseUrl}}/api/users?page=1&limit=100
Authorization: Bearer {{authToken}}

### Search with Complex Query
GET {{baseUrl}}/api/users/search?q=admin@testcorp.com&limit=50
Authorization: Bearer {{authToken}}

### Get User Activities with Large Limit
GET {{baseUrl}}/api/users/{{userId}}/activities?page=1&limit=100
Authorization: Bearer {{authToken}}

### ========================================
### üîê ROLE-BASED TESTING
### ========================================

### Test as Regular User (if you have a user token)
# GET {{baseUrl}}/api/users
# Authorization: Bearer {{userToken}}

### Test as Company Admin
# GET {{baseUrl}}/api/users
# Authorization: Bearer {{adminToken}}

### Test as Platform Admin
# GET {{baseUrl}}/api/users
# Authorization: Bearer {{platformAdminToken}}

### ========================================
### üìã COMPREHENSIVE TEST SCENARIOS
### ========================================

### Scenario 1: Complete User Lifecycle
# 1. Get all users
GET {{baseUrl}}/api/users?page=1&limit=20
Authorization: Bearer {{authToken}}

# 2. Get specific user
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

# 3. Update user
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "John Lifecycle",
  "lastName": "Test",
  "position": "Test Developer"
}

# 4. Get user preferences
GET {{baseUrl}}/api/users/{{userId}}/preferences
Authorization: Bearer {{authToken}}

# 5. Update user preferences
PUT {{baseUrl}}/api/users/{{userId}}/preferences
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "theme": "light",
  "language": "en",
  "timezone": "UTC"
}

# 6. Get user settings
GET {{baseUrl}}/api/users/{{userId}}/settings
Authorization: Bearer {{authToken}}

# 7. Update user settings
PUT {{baseUrl}}/api/users/{{userId}}/settings
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "workHoursStart": "08:00",
  "workHoursEnd": "16:00",
  "workDays": [1, 2, 3, 4, 5]
}

# 8. Get user statistics
GET {{baseUrl}}/api/users/{{userId}}/statistics
Authorization: Bearer {{authToken}}

# 9. Get user activities
GET {{baseUrl}}/api/users/{{userId}}/activities?page=1&limit=10
Authorization: Bearer {{authToken}}

### Scenario 2: Bulk Operations
# 1. Import multiple users
POST {{baseUrl}}/api/users/import
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "usersData": [
    {
      "email": "bulkuser1@testcorp.com",
      "firstName": "Bulk",
      "lastName": "User1",
      "role": "user",
      "isActive": true
    },
    {
      "email": "bulkuser2@testcorp.com",
      "firstName": "Bulk",
      "lastName": "User2",
      "role": "user",
      "isActive": true
    }
  ]
}

# 2. Bulk update users
PUT {{baseUrl}}/api/users/bulk/update
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userIds": ["{{userId}}"],
  "updateData": {
    "department": "Bulk Updated Department"
  }
}

# 3. Export users
GET {{baseUrl}}/api/users/export/company/{{companyId}}
Authorization: Bearer {{authToken}}

### Scenario 3: Error Handling
# 1. Test invalid user ID
GET {{baseUrl}}/api/users/00000000-0000-0000-0000-000000000000
Authorization: Bearer {{authToken}}

# 2. Test invalid data
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "firstName": "",
  "phone": "invalid",
  "salary": -1000
}

# 3. Test unauthorized access
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer invalid-token

# 4. Test missing authentication
GET {{baseUrl}}/api/users/{{userId}}

### ========================================
### üéØ SUCCESS CRITERIA
### ========================================

### All tests should return appropriate status codes:
# - 200 OK: Successful GET requests
# - 201 Created: Successful POST requests  
# - 200 OK: Successful PUT/PATCH requests
# - 400 Bad Request: Invalid data or validation errors
# - 401 Unauthorized: Missing or invalid authentication
# - 403 Forbidden: Insufficient permissions
# - 404 Not Found: Resource not found
# - 500 Internal Server Error: Server errors

### Response times should be:
# - Simple queries: < 500ms
# - Complex analytics: < 2000ms
# - Bulk operations: < 5000ms

### All responses should include:
# - Proper Content-Type: application/json
# - Success/error indicators
# - Appropriate error messages
# - Data validation feedback